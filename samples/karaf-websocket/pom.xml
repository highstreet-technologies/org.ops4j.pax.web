<!--

    Copyright 2021 OPS4J.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>corg.ops4j.pax.web.samples</groupId>
	<artifactId>websocket-hazelcast</artifactId>
	<packaging>war</packaging>
	<version>1.0.0-SNAPSHOT</version>
	<name>${project.artifactId}</name>
	<description>cloud-websocket Module</description>

	<properties>
		<jettyVersion>9.0.7.v20131107</jettyVersion>
	</properties>

	<dependencies>
	
	<dependency>
                <groupId>org.osgi</groupId>
                <artifactId>org.osgi.core</artifactId>
                <version>4.2.0</version>
                <scope>provided</scope>
            </dependency>
            
            <dependency>
                <groupId>javax</groupId>
                <artifactId>javaee-api</artifactId>
                <version>6.0</version>
                <scope>provided</scope>
            </dependency>
            
            
		<dependency>
			<groupId>org.eclipse.jetty.websocket</groupId>
			<artifactId>websocket-servlet</artifactId>
			<version>${jettyVersion}</version>
			<scope>provided</scope>
		</dependency>

	<!-- 	<dependency>
			<groupId>javax.websocket</groupId>
			<artifactId>javax.websocket-api</artifactId>
			<version>1.0</version>
			<scope>provided</scope>
		</dependency>
 -->

		<dependency>
			<groupId>com.hazelcast</groupId>
			<artifactId>hazelcast-client</artifactId>
			<version>3.2.3</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>


	<!-- This POM serves as the parent of all our hybrid application modules. 
		We configure common plugins and dependencies here. -->
	<build>
		<finalName>${project.artifactId}</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-bundle-plugin</artifactId>
					<!-- 2.2.0 and above have new bnd which has wab instruction. 2.3.4 has 
						few important bug fixes. -->
					<version>2.3.4</version>
					<extensions>true</extensions>
					<configuration>
						<supportedProjectTypes>
							<supportedProjectType>war</supportedProjectType>
							<supportedProjectType>bundle</supportedProjectType>
							<supportedProjectType>jar</supportedProjectType>
						</supportedProjectTypes>
						<instructions>
							<!-- Read all OSGi configuration info from this optional file -->
							<_include>-osgi.properties</_include>
							<!-- No packages are exported by default. Having any pattern is dangerous, 
								as the plugin will add any package found in dependency chain that matches 
								the pattern as well. Since there is no easy way to have an include filter 
								for just local packages, we don't export anything by default. -->
							<Export-Package>!*</Export-Package>
						</instructions>
					</configuration>
					<executions>
						<execution>
							<id>bundle-manifest</id>
							<phase>process-classes</phase>
							<goals>
								<goal>manifest</goal>
							</goals>
						</execution>
						<execution>
							<id>bundle-install</id>
							<phase>install</phase>
							<goals>
								<goal>install</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin> <!-- Need to use this plugin to build war files -->
					<artifactId>maven-war-plugin</artifactId>
					<groupId>org.apache.maven.plugins</groupId>
					<version>2.4</version>
					<configuration>
						<archive>
							<!-- add bundle plugin generated manifest to the war -->
							<manifestFile>
								${project.build.outputDirectory}/META-INF/MANIFEST.MF
							</manifestFile>
							<!-- Adding Bundle-ClassPath in maven-bundle-plugin confuses that 
								plugin and it generates wrong Import-Package, etc. So, we generate it here. -->
							<manifestEntries>
								<Bundle-ClassPath>WEB-INF/classes/
								</Bundle-ClassPath>
							</manifestEntries>
						</archive>
						<!-- We don't always have a web.xml -->
						<failOnMissingWebXml>false</failOnMissingWebXml>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-jar-plugin</artifactId>
					<configuration>
						<archive>
							<!-- add bundle plugin generated manifest to the jar -->
							<manifestFile>
								${project.build.outputDirectory}/META-INF/MANIFEST.MF
							</manifestFile>
						</archive>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>1.7</source>
						<target>1.7</target>
					</configuration>
				</plugin>

			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<!-- Enable this plugin for all modules -->
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
			</plugin>


		</plugins>

	</build>
</project>
